Experiment 4.3: Ticket Booking System

This program simulates a ticket booking system where multiple users (threads) try to book seats at the same time. The key challenges addressed are:

1) Avoiding Double Booking ‚Üí Using synchronized methods to ensure no two users book the same seat.
2) Prioritizing VIP Customers ‚Üí Using thread priorities so VIP users' bookings are processed before regular users.

üìå Core Concepts Used
Ô∏è1 Synchronized Booking Method
The method bookSeat() is marked as synchronized, ensuring that only one thread can access it at a time.
This prevents race conditions, where two threads might try to book the same seat simultaneously.
  
Ô∏è2 Thread Priorities for VIP Customers
Threads representing VIP users are assigned Thread.MAX_PRIORITY so they execute first.
Regular users have Thread.NORM_PRIORITY or Thread.MIN_PRIORITY, making them process later.

3 Handling Multiple Users
Each user trying to book a seat is represented by a thread.
Users can select a seat, and if it‚Äôs already booked, they receive an error message.


Step-by-Step Execution
1 Initialize the TicketBookingSystem ‚Üí Allows booking of N seats.
2 Create Multiple Booking Threads ‚Üí Each user (VIP or Regular) is assigned a thread.
3 Start All Threads ‚Üí Threads compete for booking, with VIPs processed first.
4 Ensure No Double Booking ‚Üí synchronized method prevents duplicate seat allocation.
5 Threads Finish Execution & Display Booking Status.


üîπ Why Use Synchronization?
Without synchronized, two threads might book the same seat simultaneously, causing double booking issues. Using synchronized, only one thread at a time can modify the seat booking data.

üîπ Why Use Thread Priorities?
Setting higher priority for VIP users ensures their bookings are processed first, simulating real-world priority-based bookings.



Program/Code:

import java.util.concurrent.locks.ReentrantLock;
import java.util.*;

class TicketBookingSystem {
    private final boolean[] seats;
    private final ReentrantLock lock = new ReentrantLock();

    public TicketBookingSystem(int totalSeats) {
        seats = new boolean[totalSeats];
    }

    public synchronized boolean bookSeat(int seatNumber, String userName, boolean isVIP) {
        if (seatNumber < 1 || seatNumber > seats.length) {
            System.out.println(userName + ": Invalid seat number!");
            return false;
        }
        
        int index = seatNumber - 1;
        if (seats[index]) {
            System.out.println(userName + ": Seat " + seatNumber + " is already booked!");
            return false;
        }
        
        seats[index] = true;
        System.out.println(userName + " (" + (isVIP ? "VIP" : "Regular") + ") booked seat " + seatNumber);
        return true;
    }
    
    public void displaySeats() {
        System.out.println("Current Seat Status:");
        for (int i = 0; i < seats.length; i++) {
            System.out.println("Seat " + (i + 1) + ": " + (seats[i] ? "Booked" : "Available"));
        }
    }
}

public class TicketBookingDemo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of seats: ");
        int totalSeats = scanner.nextInt();
        TicketBookingSystem system = new TicketBookingSystem(totalSeats);
        
        while (true) {
            System.out.println("\n1. Book Seat\n2. Display Seats\n3. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            
            if (choice == 1) {
                System.out.print("Enter your name: ");
                String name = scanner.next();
                System.out.print("Enter seat number: ");
                int seatNumber = scanner.nextInt();
                System.out.print("Are you a VIP? (true/false): ");
                boolean isVIP = scanner.nextBoolean();
                system.bookSeat(seatNumber, name, isVIP);
            } else if (choice == 2) {
                system.displaySeats();
            } else if (choice == 3) {
                System.out.println("Exiting...");
                break;
            } else {
                System.out.println("Invalid choice, try again.");
            }
        }
        
        scanner.close();
    }
}
